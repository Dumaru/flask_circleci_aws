version: 2.1
orbs:
  aws-eks: circleci/aws-eks@0.2.7
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  run_tests:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install Python Dependencies
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV && source $BASH_ENV
            pip install --user -r requirements.txt
      - run:
          name: Run Unit Tests
          command: |
            pytest --junitxml=test-reports/junit.xml --html=test-reports/pytest_report.html --self-contained-html
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  build_image:
    machine: true
    steps:
      - checkout
      # start proprietary DB using private Docker image
      # with credentials stored in the UI
      - run: |
          echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      # build the application image
      - run: docker build -t dumaru/flask_app:dev .
      # deploy the image
      - run: docker push dumaru/flask_app:dev
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment/deployment.yaml
          resource-name: deployment/nginx0-deployment
      - kubernetes/create-or-update-resource:
          # get-rollout-status: true
          resource-file-path: deployment/service.yaml
          resource-name: service/my-nginx
workflows:
  test_push_image:
    jobs:
      - run_tests:
        filters:
          branches:
            only: dev
      - build_image:
          requires:
            - run_tests
          filters:
            branches:
              only: dev
      - create-deployment:
          requires:
            - build_image
          cluster-name: rmCluster
          filters:
            branches:
              only: dev
